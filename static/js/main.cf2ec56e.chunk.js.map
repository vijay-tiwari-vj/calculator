{"version":3,"sources":["App.js","serviceWorker.js","index.js","components/Calculator.js"],"names":["App","className","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","all","ids","7","8","9","4","5","6","1","2","3","0","nums","ops","state","lastPressed","undefined","calc","operation","handleClick","e","innerText","target","setState","d","toString","slice","length","evaluated","eval","splitted","split","last","includes","lastNumberIdx","reverse","findIndex","char","this","id","onClick","map","item","key","Component"],"mappings":"wLAWeA,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,m5BEvItBC,IAAM,CAAC,MAAO,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,GAClEC,IAAM,CACVC,EAAG,QACHC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,QACHC,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,MACL,IAAK,UACL,IAAO,UAEHC,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,KAEjClC,WAAb,kvBACEmC,MAAQ,CACNC,iBAAaC,EACbC,KAAM,IACNC,eAAWF,GAJf,MAOEG,YAAc,SAACC,GAAO,IAAD,YACW,MAAKN,MAA3BG,KADW,YACXA,KAAMF,YADK,YACLA,YACNM,UAAcD,EAAEE,OAAhBD,UAER,OAAQA,WAEN,IAAK,KACH,MAAKE,SAAS,CACZN,KAAM,MAER,MAGF,IAAK,MACH,GAAa,MAATA,KAAc,CAChB,IAAMO,EAAIP,KAAKQ,WAAWC,MAAM,EAAGT,KAAKU,OAAS,GACjD,MAAKJ,SAAS,CACZN,KAAY,KAANO,EAAW,IAAMA,IAG3B,MAGF,IAAK,IACH,IAAMI,UAAYC,KAAKZ,MACvB,MAAKM,SAAS,CACZN,KAAMW,YAER,MAGF,IAAK,IACH,IAAME,SAAWb,KAAKc,MAAM,cACtBC,KAAOF,SAASJ,OAAO,GAAG,GAE3BM,KAAKC,SAAS,MACjB,MAAKV,SAAS,CACZN,KAAMA,KAAO,MAGjB,MAGF,QACE,IAAIG,QAAIJ,EACR,GAAIH,IAAIoB,SAASZ,WACf,GAAIR,IAAIoB,SAASlB,cAA8B,MAAdM,UAAmB,CAClD,IAAMa,cAAgBjB,KAAKc,MAAM,IAAII,UAClCC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgBzB,KAAKqB,UAAUI,MACpDjB,GAAIH,KAAKS,MAAM,EAAGT,KAAKU,OAASO,eAA5B,WAAiDb,UAAjD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGHD,GAAa,MAATH,KAAeI,UAAaJ,KAAOI,UAGzC,MAAKE,SAAS,CACZN,KAAMG,KAKZ,MAAKG,SAAS,CACZR,YAAaM,aAvEnB,qNA2EY,IAAD,OACCJ,EAASqB,KAAKxB,MAAdG,KAER,OACE,kEAAKvC,UAAU,mBACb,kEAAK6D,GAAG,UAAU7D,UAAU,WAC1B,kEAAKA,UAAU,QAASuC,IAG1B,qEAAQsB,GAAG,QAAQ7D,UAAU,WAAW8D,QAASF,KAAKnB,aAAtD,MAECnB,IAAIyC,KAAI,SAAAC,GAAI,OACX,qEACEC,IAAKD,EACLF,QAAS,EAAKrB,YACdoB,GAAItC,IAAIyC,IAEPA,MAIL,qEAAQH,GAAG,SAAS7D,UAAU,WAAW8D,QAASF,KAAKnB,aAAvD,UAhGR,YAAgCyB,8CAsGjBjE,kC","file":"static/js/main.cf2ec56e.chunk.js","sourcesContent":["import React from 'react';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\r\n\r\nconst all = ['DEL', '/', 7, 8, 9, '*', 4, 5, 6, '+', 1, 2, 3, '-', '.', 0];\r\nconst ids = {\r\n  7: 'seven',\r\n  8: 'eight',\r\n  9: 'nine',\r\n  4: 'four',\r\n  5: 'five',\r\n  6: 'six',\r\n  1: 'one',\r\n  2: 'two',\r\n  3: 'three',\r\n  0: 'zero',\r\n  '/': 'divide',\r\n  '*': 'multiply',\r\n  '-': 'subtract',\r\n  '+': 'add',\r\n  '.': 'decimal',\r\n  'DEL': 'delete'\r\n}\r\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\r\nconst ops = ['/', '*', '-', '+', 'AC', 'DEL', '.'];\r\n\r\nexport class Calculator extends Component {\r\n  state = {\r\n    lastPressed: undefined,\r\n    calc: '0',\r\n    operation: undefined\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const { calc, lastPressed } = this.state;\r\n    const { innerText } = e.target;\r\n\r\n    switch (innerText) {\r\n\r\n      case 'AC': {\r\n        this.setState({\r\n          calc: '0'\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'DEL': {\r\n        if (calc !== '0') {\r\n          const d = calc.toString().slice(0, calc.length - 1)\r\n          this.setState({\r\n            calc: d === '' ? '0' : d\r\n          });\r\n        }\r\n        break;\r\n      }\r\n\r\n      case '=': {\r\n        const evaluated = eval(calc);\r\n        this.setState({\r\n          calc: evaluated\r\n        });\r\n        break;\r\n      }\r\n\r\n      case '.': {\r\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\r\n        const last = splitted.slice(-1)[0];\r\n\r\n        if (!last.includes('.')) {\r\n          this.setState({\r\n            calc: calc + '.'\r\n          });\r\n        }\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        let e = undefined;\r\n        if (ops.includes(innerText)) {\r\n          if (ops.includes(lastPressed) && innerText !== '-') {\r\n            const lastNumberIdx = calc.split('').reverse()\r\n              .findIndex(char => char !== ' ' && nums.includes(+char));\r\n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\r\n          } else {\r\n            e = `${calc} ${innerText} `;\r\n          }\r\n        } else {\r\n          e = calc === '0' ? innerText : (calc + innerText);\r\n        }\r\n\r\n        this.setState({\r\n          calc: e,\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      lastPressed: innerText\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { calc } = this.state\r\n\r\n    return (\r\n      <div className=\"calculator-grid\">\r\n        <div id=\"display\" className=\"display\">\r\n          <div className=\"calc\" >{calc}</div>\r\n        </div>\r\n\r\n        <button id=\"clear\" className=\"span-two\" onClick={this.handleClick}>AC</button>\r\n\r\n        {all.map(item => (\r\n          <button\r\n            key={item}\r\n            onClick={this.handleClick}\r\n            id={ids[item]}\r\n          >\r\n            {item}\r\n          </button>\r\n        ))}\r\n\r\n        <button id=\"equals\" className=\"span-two\" onClick={this.handleClick}>=</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n"],"sourceRoot":""}